{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Next.js project with TypeScript and essential dependencies",
        "description": "Initialize a new Next.js project with TypeScript and install required dependencies including Tailwind CSS, shadcn/ui, next-themes, lucide-react, and Recharts.",
        "details": "1. Use create-next-app to initialize a new Next.js project with TypeScript\n2. Install and configure Tailwind CSS (v3.3.2)\n3. Set up shadcn/ui (v0.3.0) with its CLI\n4. Install next-themes (v0.2.1), lucide-react (v0.252.0), and recharts (v2.7.2)\n5. Configure ESLint and Prettier for code linting and formatting\n6. Set up basic folder structure (/components/layout, /components/ui, /pages, /styles)\n7. Initialize Git repository and make initial commit",
        "testStrategy": "1. Verify all dependencies are correctly installed and configured\n2. Ensure the project builds without errors\n3. Check that ESLint and Prettier are working as expected",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Next.js project with TypeScript and Tailwind CSS",
            "description": "Initialize a new Next.js project with TypeScript and configure Tailwind CSS for the dark theme aesthetic",
            "dependencies": [],
            "details": "Use create-next-app to set up a new Next.js project with TypeScript. Install Tailwind CSS v3.3.2 and configure it for the dark theme. In tailwind.config.js, extend the theme with custom colors: backgroundColor: { 'deep-purple': '#2D1B69' }, textColor: { 'glow-cyan': '#00FFFF', 'glow-magenta': '#FF00FF', 'glow-orange': '#FFA500' }. Create a global.css file with @tailwind directives and basic dark mode styles.\n<info added on 2025-06-19T10:33:50.737Z>\n**SUBTASK 1.1 IMPLEMENTATION PLAN:**\n\n**Goal:** Initialize Next.js project with TypeScript and configure Tailwind CSS for the Recehtok-style dark theme aesthetic.\n\n**Analysis of current state:**\n- Fresh directory `/Volumes/gn-ex/Axsient/Axsient Work/Post Vetting/app/v11`\n- No existing Next.js project\n- Git already initialized\n- Task Master already set up\n\n**Implementation Steps:**\n\n1. **Create Next.js project with TypeScript**\n   - Use `npx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir --import-alias \"@/*\"`\n   - This creates project in current directory with App Router, TypeScript, Tailwind CSS, ESLint\n\n2. **Configure Tailwind for Recehtok-style theme**\n   - Modify `tailwind.config.ts` to add custom colors matching screenshot:\n     - Deep purple background: `#2D1B69` \n     - Glow colors: cyan `#00FFFF`, magenta `#FF00FF`, orange `#FFA500`\n     - Dark sidebar: `#1A103E`\n   - Enable dark mode support\n   - Add glassmorphism utilities (backdrop-blur, bg-opacity)\n\n3. **Set up global styles**\n   - Configure `src/app/globals.css` with dark theme defaults\n   - Add CSS custom properties for glow effects\n   - Set up base typography\n\n4. **Create initial folder structure**\n   - `src/components/layout/` - for layout components\n   - `src/components/ui/` - for shadcn/ui components  \n   - `src/lib/` - for utilities\n\n**Expected files to be created/modified:**\n- `package.json` - Next.js dependencies\n- `tailwind.config.ts` - custom theme config\n- `src/app/globals.css` - global styles\n- `src/app/layout.tsx` - root layout\n- `src/app/page.tsx` - home page\n- `next.config.mjs` - Next.js config\n</info added on 2025-06-19T10:33:50.737Z>\n<info added on 2025-06-19T10:34:52.892Z>\n**IMPLEMENTATION UPDATE:**\n\n**Issue discovered:** `create-next-app` cannot initialize in a directory with existing files (.taskmaster, .cursor, docs-gn, etc.)\n\n**Adjusted approach:** Manual Next.js setup since we need to preserve existing Task Master structure\n\n**New implementation plan:**\n1. Manually create `package.json` with Next.js dependencies\n2. Install dependencies: next, react, react-dom, typescript, tailwindcss, etc.\n3. Create Next.js config files manually\n4. Set up src directory structure\n5. Configure Tailwind CSS with custom Recehtok theme\n\n**Starting manual setup now...**\n</info added on 2025-06-19T10:34:52.892Z>\n<info added on 2025-06-19T10:40:13.877Z>\n**BUILD ISSUES DISCOVERED:**\n\n1. **Next.js Config Issue:** `appDir` in experimental is deprecated in Next.js 14 \n2. **React Context Issue:** `next-themes` having createContext error - likely React version compatibility\n\n**FIXES BEING APPLIED:**\n1. Removing deprecated `appDir` from next.config.mjs\n2. Updating React versions to latest compatible versions\n3. Retesting build after fixes\n\n**Status:** Issues identified, applying fixes now...\n</info added on 2025-06-19T10:40:13.877Z>\n<info added on 2025-06-19T10:45:07.413Z>\n**SUBTASK 1.1 COMPLETED SUCCESSFULLY! ‚úÖ**\n\n**What was accomplished:**\n‚úÖ Next.js 14.0.4 project initialized manually (due to existing files)\n‚úÖ TypeScript configuration set up properly\n‚úÖ Tailwind CSS 3.3.0 configured with custom Recehtok-style colors:\n  - Deep purple background: `#2D1B69`\n  - Dark sidebar: `#1A103E`\n  - Glow colors: cyan `#00FFFF`, magenta `#FF00FF`, orange `#FFA500`\n‚úÖ Custom CSS utilities created (glassmorphic, glow effects, animations)\n‚úÖ Project structure created (`src/app/`, `src/components/`, `src/lib/`)\n‚úÖ Build process working correctly (`npm run build` successful)\n‚úÖ Development server tested and running (`npm run dev` working)\n‚úÖ All custom Tailwind classes applying correctly in browser\n\n**Issue Resolution:**\n‚ö†Ô∏è `next-themes` had compatibility issues with React/Next.js versions\n‚úÖ Temporarily removed next-themes, using basic dark mode instead\nüîÆ Will implement proper theme switching in Task 3 (Theme Management)\n\n**Files Created/Modified:**\n- `package.json` - Dependencies and scripts\n- `next.config.mjs` - Next.js configuration\n- `tsconfig.json` - TypeScript configuration\n- `tailwind.config.ts` - Custom Recehtok theme colors\n- `postcss.config.mjs` - PostCSS configuration  \n- `src/app/globals.css` - Global styles with custom utilities\n- `src/app/layout.tsx` - Root layout component\n- `src/app/page.tsx` - Test page with Recehtok-style elements\n- `.eslintrc.json` - ESLint configuration\n- `next-env.d.ts` - TypeScript definitions\n\n**Test Results:**\n‚úÖ Build successful: `npm run build`\n‚úÖ Dev server working: `npm run dev`\n‚úÖ TypeScript compilation: No errors\n‚úÖ Custom colors rendering: All Recehtok colors working\n‚úÖ Glassmorphic effects: Working correctly\n‚úÖ Glow animations: Pulse animations working\n‚úÖ Responsive layout: Grid system working\n\n**Next Steps:**\nReady to proceed to Subtask 1.2: Implement glassmorphic and glowing effects (components)\n</info added on 2025-06-19T10:45:07.413Z>",
            "status": "done",
            "testStrategy": "Verify project structure, check Tailwind configuration, and test basic component rendering with custom colors"
          },
          {
            "id": 2,
            "title": "Implement glassmorphic and glowing effects",
            "description": "Create reusable components for glassmorphic panels and glowing elements",
            "dependencies": [
              1
            ],
            "details": "Create a GlassmorphicPanel component using Tailwind classes: bg-opacity-20 backdrop-filter backdrop-blur-lg border border-opacity-30 rounded-xl. For glowing effects, create a GlowingElement component with CSS classes: relative and ::after pseudo-element with absolute positioning, blur effect, and custom colors. Use next-themes to toggle between light and dark modes.\n<info added on 2025-06-19T10:47:30.082Z>\n**SUBTASK 1.2 IMPLEMENTATION PLAN:**\n\n**Goal:** Create reusable glassmorphic and glowing effect components based on the Recehtok-style dashboard aesthetic\n\n**Analysis of requirements:**\n- Create GlassmorphicPanel component with backdrop blur and transparency\n- Create GlowingElement component with CSS glow effects using ::after pseudo-elements\n- Components should match the screenshot's luminous aesthetic\n- Need to handle theme variations (though currently using dark theme only)\n\n**Implementation Steps:**\n\n1. **Create GlassmorphicPanel Component**\n   - Location: `src/components/ui/GlassmorphicPanel.tsx`\n   - Features: backdrop-blur, transparent background, subtle borders\n   - Props: children, className override, size variants\n\n2. **Create GlowingElement Component**\n   - Location: `src/components/ui/GlowingElement.tsx`\n   - Features: glow effects using CSS ::after pseudo-elements\n   - Props: glowColor, intensity, children, className\n\n3. **Enhance Tailwind Configuration**\n   - Add more specific glow utilities\n   - Add backdrop-blur utilities if missing\n   - Add glassmorphic color variants\n\n4. **Create Demo Components**\n   - Update home page to showcase both components\n   - Test different glow colors (cyan, magenta, orange)\n   - Test glassmorphic panels with different content\n</info added on 2025-06-19T10:47:30.082Z>\n<info added on 2025-06-19T10:52:59.383Z>\n**SUBTASK 1.2 COMPLETED SUCCESSFULLY! ‚úÖ**\n\n**What was accomplished:**\n‚úÖ **GlassmorphicPanel Component** - Created reusable component with:\n  - Multiple variants: default, notification, card\n  - Size options: sm, md, lg, full\n  - Backdrop blur effects with proper transparency\n  - Gradient overlays for depth\n  - Perfect match to Recehtok-style aesthetic\n\n‚úÖ **GlowingElement Component** - Created reusable component with:\n  - Multiple glow colors: cyan, magenta, orange, purple, blue\n  - Intensity levels: low, medium, high\n  - Variant types: text, border, background\n  - Proper color mapping and CSS integration\n\n‚úÖ **Enhanced Tailwind Configuration** - Added:\n  - Custom box-shadow utilities for multi-layer glow effects\n  - Animation keyframes for glow-pulse and float effects\n  - Extended backdrop-blur utilities\n  - Custom gradient utilities for Recehtok-style\n\n‚úÖ **Custom CSS Utilities** - Implemented:\n  - .glow-low, .glow-medium, .glow-high intensity classes\n  - .text-glow-* classes with proper text-shadow effects\n  - .glow-hover and .glow-float interactive effects\n  - Enhanced glassmorphic utilities\n\n‚úÖ **Comprehensive Demo Page** - Showcased:\n  - Dashboard layout with glassmorphic panels\n  - Statistics cards with glowing numbers\n  - Notification panel with glassmorphic effects\n  - Component showcase with all variations\n  - Interactive hover and animation effects\n\n‚úÖ **Build & Runtime Testing** - Verified:\n  - All components compile without errors\n  - Development server runs correctly\n  - All custom Tailwind classes apply properly\n  - Visual output matches Recehtok-style requirements\n\n**Visual Results:**\n- Deep purple gradient background perfectly implemented\n- Glassmorphic panels with proper backdrop blur and transparency\n- Multi-colored glow effects (cyan, magenta, orange) working as expected\n- Text glow effects with proper shadow layers\n- Interactive animations (hover pulse, floating) functioning correctly\n- All components responsive and properly styled\n\n**Technical Implementation:**\n- Proper TypeScript interfaces for all components\n- Reusable component architecture with flexible props\n- CSS-in-JS approach using Tailwind utilities\n- Performance-optimized with proper layering\n- Clean separation of concerns between components and utilities\n</info added on 2025-06-19T10:52:59.383Z>",
            "status": "done",
            "testStrategy": "Test glassmorphic and glowing components in isolation and within layout contexts"
          },
          {
            "id": 3,
            "title": "Develop sidebar and main layout structure",
            "description": "Create the sidebar component and main layout structure for the dashboard",
            "dependencies": [
              2
            ],
            "details": "Implement a Sidebar component with a dark background (#1A103E) and subtle hover effects. Use lucide-react for clean icons. Create a Layout component with a three-column structure: Sidebar, MainContent, and NotificationsPanel. Style the MainContent with the deep purple background (#2D1B69) and appropriate padding.\n<info added on 2025-06-19T10:59:30.667Z>\n**SUBTASK 1.3 IMPLEMENTATION PLAN:**\n\n**Goal:** Create the sidebar component and main layout structure matching the Recehtok-style dashboard aesthetic\n\n**Analysis of requirements:**\n- Create a sidebar with dark background (#1A103E) and curved right edge (like Consilio-style)\n- Implement main layout with sidebar + main content + notifications panel structure\n- Use the deep purple background (#2D1B69) for main content\n- Apply glassmorphic effects and proper spacing\n- Ensure responsive behavior (fixed on desktop, collapsible on mobile)\n\n**Implementation Steps:**\n\n1. **Create Layout Component Structure**\n   - Location: `src/components/layout/Layout.tsx`\n   - Three-column structure: Sidebar (fixed width), MainContent (flex-1), NotificationsPanel (optional/collapsible)\n   - Use CSS Grid or Flexbox for layout management\n\n2. **Create Sidebar Component**\n   - Location: `src/components/layout/Sidebar.tsx`\n   - Dark sidebar background (#1A103E) with curved right edge using SVG or CSS\n   - Fixed position on desktop (w-64 or w-72)\n   - Include placeholder sections: Logo area, Search input, Navigation menu, User profile\n\n3. **Create MainContent Area**\n   - Location: `src/components/layout/MainContent.tsx`\n   - Deep purple gradient background matching Recehtok-style\n   - Proper padding and responsive behavior\n   - Content area for page-specific components\n\n4. **Implement Curved Edge Design**\n   - Research SVG path or CSS techniques for curved sidebar edge\n   - Match the Consilio-style curved design from reference image\n   - Ensure smooth integration with layout\n\n5. **Test Layout Structure**\n   - Verify responsive behavior\n   - Test component integration\n   - Ensure proper styling and spacing\n</info added on 2025-06-19T10:59:30.667Z>\n<info added on 2025-06-19T11:03:34.633Z>\n**SUBTASK 1.3 COMPLETED SUCCESSFULLY!**\n\n**Implementation Summary:**\n\n‚úÖ **Created Layout Component Structure:**\n- `src/components/layout/Layout.tsx` - Main layout with three-column structure\n- `src/components/layout/Sidebar.tsx` - Dark sidebar with curved right edge\n- `src/components/layout/MainContent.tsx` - Main content area with decorative elements\n\n‚úÖ **Sidebar Features Implemented:**\n- Dark background (#1A103E) with curved right edge using SVG\n- VettPro logo with glowing text effect\n- Search input with glassmorphic styling\n- Navigation menu with all 9 main menu items from menu.md:\n  - Dashboard, Vetting Center, Suppliers, Individuals\n  - Reporting & Insights, Field Operations, Administration\n  - My Account, Help & Support\n- User profile section at bottom\n- Proper hover states and active item highlighting\n\n‚úÖ **Main Content Features:**\n- Deep purple gradient background (#2D1B69)\n- Responsive padding and layout\n- Decorative gradient orbs for visual depth\n- Proper overflow handling and scrolling\n- Integration with existing component showcase\n\n‚úÖ **Layout Integration:**\n- Updated root layout.tsx to use new Layout component\n- Updated home page to work with three-column structure\n- Maintained all existing glassmorphic and glowing components\n- Responsive design with proper mobile considerations\n\n‚úÖ **Technical Implementation:**\n- Clean component architecture with proper TypeScript interfaces\n- Consistent styling using Tailwind CSS custom utilities\n- Proper accessibility with ARIA labels and semantic HTML\n- Performance optimized with proper class name utilities\n- Build tested successfully - no errors or warnings\n\n‚úÖ **Visual Results:**\n- Perfect Recehtok-style aesthetic with dark theme\n- Smooth glassmorphic effects and glow elements\n- Professional sidebar with curved edge detail\n- Balanced three-column layout structure\n- Responsive behavior across screen sizes\n\n**Files Created/Modified:**\n- `src/components/layout/Layout.tsx` (new)\n- `src/components/layout/Sidebar.tsx` (new) \n- `src/components/layout/MainContent.tsx` (new)\n- `src/app/layout.tsx` (updated)\n- `src/app/page.tsx` (updated)\n\n**Ready for Next Steps:**\nThe layout foundation is now complete and ready for navigation functionality implementation in the next subtasks.\n</info added on 2025-06-19T11:03:34.633Z>",
            "status": "done",
            "testStrategy": "Verify responsive behavior of layout components and correct styling across breakpoints"
          },
          {
            "id": 4,
            "title": "Implement wallet cards and notification panel",
            "description": "Create components for wallet cards with gradient backgrounds and a translucent notification panel",
            "dependencies": [
              2,
              3
            ],
            "details": "Develop a WalletCard component with rounded corners (rounded-2xl), gradient backgrounds (bg-gradient-to-r from-purple-600 to-indigo-600), and subtle glow effects (shadow-lg shadow-purple-500/50). Implement a NotificationPanel component using the GlassmorphicPanel as a base, adding a scrollable list of notifications with hover effects.",
            "status": "pending",
            "testStrategy": "Test wallet card animations and notification panel scrolling behavior"
          },
          {
            "id": 5,
            "title": "Integrate Recharts for glowing chart components",
            "description": "Create chart components using Recharts with custom styling for the glowing effect",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Use Recharts to create LineChart components. Customize the charts with vibrant colors (pink: #FF00FF, cyan: #00FFFF, orange: #FFA500) and add a custom SVG filter for the glowing effect. Implement a higher-order component to wrap Recharts elements and apply the glow filter. Style the chart background with a subtle grid using Tailwind classes.",
            "status": "pending",
            "testStrategy": "Verify chart rendering with mock data and test responsiveness of charts in different viewport sizes"
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement core application layout with responsive sidebar",
        "description": "Create the main application layout with a responsive sidebar that matches the design in 'Consilio-style_dashboard.png'.",
        "details": "1. Create a Layout component in /components/layout\n2. Implement sidebar component with SVG path for curved edge\n3. Use Tailwind CSS for responsive design (fixed on desktop, hamburger menu on mobile)\n4. Implement hamburger menu functionality for mobile view\n5. Add placeholder logo and user profile section in sidebar\n6. Style sidebar according to 'Consilio-style_dashboard.png' and design-theme.md\n7. Use next/link for navigation items\n8. Implement active link highlighting",
        "testStrategy": "1. Test responsiveness across different screen sizes\n2. Verify sidebar shape and styling match the reference image\n3. Check hamburger menu functionality on mobile devices\n4. Ensure active link highlighting works correctly",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Layout component with dark theme",
            "description": "Implement the Layout component in /components/layout with a dark theme aesthetic",
            "dependencies": [],
            "details": "Create a Layout.js component in /components/layout. Use Tailwind CSS to set the background color to #2D1B69. Implement a flex layout with sidebar, main content, and notifications panel. Use 'text-white' for text and 'font-sans' for typography. Add subtle shadows with 'shadow-lg' and rounded corners with 'rounded-lg' to all container elements.",
            "status": "pending",
            "testStrategy": "Verify the Layout component renders correctly and applies the dark theme consistently across all child components."
          },
          {
            "id": 2,
            "title": "Implement responsive sidebar with curved edge",
            "description": "Create a responsive sidebar component with an SVG path for the curved edge",
            "dependencies": [
              1
            ],
            "details": "Create a Sidebar.js component. Use an SVG path to create a curved edge on the right side. Apply a slightly lighter background color (e.g., #3D2B79) to the sidebar. Implement responsiveness using Tailwind's 'md:' prefix for desktop and default styles for mobile. Use 'fixed' positioning on desktop and 'absolute' with a transform for the slide-out menu on mobile. Add a subtle glow effect to active items using 'shadow-[0_0_10px_rgba(255,255,255,0.3)]'.",
            "status": "pending",
            "testStrategy": "Test the sidebar's responsiveness across different screen sizes and verify the curved edge renders correctly."
          },
          {
            "id": 3,
            "title": "Add glassmorphic notification panel",
            "description": "Implement a translucent notification panel with backdrop blur and subtle borders",
            "dependencies": [
              1
            ],
            "details": "Create a NotificationPanel.js component. Use 'backdrop-filter' and 'backdrop-blur-lg' for the glassmorphic effect. Set background-color to 'rgba(45, 27, 105, 0.5)' for translucency. Add a subtle border with 'border border-purple-300 border-opacity-20'. Implement a scrollable list of notifications using 'overflow-y-auto'. Style each notification item with 'hover:bg-purple-700 hover:bg-opacity-30' for interactive feedback.",
            "status": "pending",
            "testStrategy": "Ensure the notification panel renders with the correct glassmorphic effect and scrolls properly on overflow."
          },
          {
            "id": 4,
            "title": "Implement glowing charts and wallet cards",
            "description": "Create vibrant, glowing line charts and gradient wallet cards with glow effects",
            "dependencies": [
              1
            ],
            "details": "Use a charting library like Chart.js or D3.js to create line charts. Apply custom styles to achieve glowing lines: use 'filter: drop-shadow(0 0 8px rgba(255,105,180,0.7))' for pink, 'rgba(0,255,255,0.7)' for cyan, and 'rgba(255,165,0,0.7)' for orange lines. For wallet cards, use 'bg-gradient-to-br from-purple-600 to-blue-500' for the gradient background. Add a glow effect with 'box-shadow: 0 0 15px rgba(147,51,234,0.5)'.",
            "status": "pending",
            "testStrategy": "Verify that charts render with the correct glowing effect and wallet cards display the gradient and glow as designed."
          },
          {
            "id": 5,
            "title": "Implement interactive elements and navigation",
            "description": "Add hover states, glowing active states, and next/link navigation with active link highlighting",
            "dependencies": [
              2
            ],
            "details": "Use Tailwind's 'hover:' prefix to add hover effects to interactive elements. For glowing active states, apply 'active:shadow-[0_0_15px_rgba(255,255,255,0.5)]'. Implement next/link for navigation items in the sidebar. For active link highlighting, use a combination of 'text-cyan-400' and 'before:content-[\"\"] before:absolute before:left-0 before:w-1 before:h-full before:bg-cyan-400' to create a glowing cyan indicator for the active link.",
            "status": "pending",
            "testStrategy": "Test all interactive elements for correct hover and active states. Verify that navigation works correctly and active links are properly highlighted."
          }
        ]
      },
      {
        "id": 3,
        "title": "Set up dark and light themes with next-themes",
        "description": "Implement dark (default) and light themes using next-themes, and create a theme switcher component.",
        "details": "1. Configure next-themes in _app.tsx\n2. Set up dark and light color palettes in tailwind.config.js based on design-theme.md\n3. Create a ThemeSwitcher component using shadcn/ui Switch\n4. Implement theme persistence using localStorage\n5. Apply theme classes to Layout component\n6. Style the application to reflect the 'Modern & Sexy,' 'Luminous & Dynamic' vision",
        "testStrategy": "1. Verify theme switching works and persists across page reloads\n2. Check that all components respect the current theme\n3. Ensure default theme is dark\n4. Test theme switcher accessibility",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure next-themes and set up color palettes",
            "description": "Set up next-themes in _app.tsx and define dark/light color palettes in tailwind.config.js",
            "dependencies": [],
            "details": "In _app.tsx, import and wrap the app with ThemeProvider from next-themes. Set defaultTheme to 'dark'. In tailwind.config.js, extend the theme with custom colors: dark:bg-[#2D1B69] for main background, text-cyan-400 for glowing effects, bg-gradient-to-r from-pink-500 to-purple-600 for wallet cards. Use opacity-75 and backdrop-filter backdrop-blur-lg for glassmorphic effects. Define hover:glow-cyan-400 and active:glow-pink-500 utilities for interactive elements.",
            "status": "pending",
            "testStrategy": "Verify that next-themes is properly configured by checking if the HTML tag's class updates when switching themes. Test color applications in different components."
          },
          {
            "id": 2,
            "title": "Create ThemeSwitcher component with glow effect",
            "description": "Develop a ThemeSwitcher component using shadcn/ui Switch with a custom glow effect",
            "dependencies": [
              1
            ],
            "details": "Use shadcn/ui Switch as base. Style with rounded-full w-14 h-7 bg-gradient-to-r from-purple-600 to-pink-500. Add glow effect with box-shadow: 0 0 15px theme('colors.pink.500'); in dark mode. Use motion.div for smooth transition on theme change. Include sun/moon icons from heroicons, styled with text-yellow-400 and text-blue-200 respectively.",
            "status": "pending",
            "testStrategy": "Test the ThemeSwitcher visually in both themes. Ensure smooth transition and correct icon display. Verify glow effect in dark mode."
          },
          {
            "id": 3,
            "title": "Implement theme persistence with localStorage",
            "description": "Use localStorage to persist user's theme preference across sessions",
            "dependencies": [
              1,
              2
            ],
            "details": "In ThemeSwitcher component, use useEffect to check localStorage for 'theme' key on mount. If exists, call setTheme with stored value. On theme change, update localStorage: localStorage.setItem('theme', newTheme). Use next-themes' useTheme hook to access current theme and setTheme function.",
            "status": "pending",
            "testStrategy": "Switch theme, reload page, and verify that the selected theme persists. Test in incognito mode to ensure clean localStorage."
          },
          {
            "id": 4,
            "title": "Style Layout component with theme-aware classes",
            "description": "Apply theme-specific styles to the Layout component for sidebar, main content, and notification panel",
            "dependencies": [
              1
            ],
            "details": "Style Layout with grid grid-cols-[250px_1fr_300px]. For sidebar: dark:bg-[#1D0F4F] bg-gray-100 h-screen. Main content: dark:bg-[#2D1B69] bg-white p-8. Notification panel: dark:bg-opacity-30 bg-white bg-opacity-70 backdrop-filter backdrop-blur-lg border-l border-gray-200 dark:border-purple-700. Use text-gray-800 dark:text-gray-100 for text. Add subtle hover effects: hover:bg-opacity-80 transition-all duration-300 to interactive elements.",
            "status": "pending",
            "testStrategy": "Visually inspect Layout in both themes. Verify correct color application, glassmorphic effects, and responsive behavior. Test hover states on interactive elements."
          },
          {
            "id": 5,
            "title": "Create glowing chart components",
            "description": "Develop chart components with vibrant, glowing effects for dark theme",
            "dependencies": [
              1,
              4
            ],
            "details": "Use react-chartjs-2 for base charts. Override Chart.js defaults for dark theme: dark:text-gray-300 for labels, dark:grid-gray-700 for grid lines. For line charts, use gradient backgrounds: createLinearGradient with rgba(255,105,180,0.1) to rgba(255,105,180,0) for pink lines. Apply glow effect with filter: drop-shadow(0 0 8px rgba(255,105,180,0.7));. Repeat for cyan (#00FFFF) and orange (#FFA500) lines. Use tailwind classes like dark:shadow-glow-pink dark:shadow-glow-cyan for container elements.",
            "status": "pending",
            "testStrategy": "Render charts in both themes. Verify glow effects and color accuracy in dark mode. Test responsiveness and animation smoothness."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement navigation system based on menu.md",
        "description": "Create a navigation system that implements all main menu items and static sub-menu items as specified in menu.md, including the 9 main sections and their respective sub-items.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "1. Create a Navigation component in /components/layout\n2. Implement all 9 main menu items and their sub-items from menu.md\n3. Use lucide-react for menu icons\n4. Create placeholder pages for each main navigation item and sub-item\n5. Implement routing using Next.js App Router\n6. Style navigation items according to design-theme.md, including the curved edge design\n7. Ensure correct active state styling for navigation links\n8. Implement dynamic recently viewed items for Suppliers and Individuals sections\n9. Structure the Administration section with its main sub-sections and nested sub-items",
        "testStrategy": "1. Verify all menu items from menu.md are present, including all 9 main sections and their sub-items\n2. Test navigation to all placeholder pages, including sub-item pages\n3. Check that active link styling is applied correctly for both main and sub-items\n4. Ensure icons are displayed properly for each main menu item\n5. Verify the curved edge design of the sidebar\n6. Test the dynamic recently viewed items functionality for Suppliers and Individuals sections\n7. Ensure proper nesting and functionality of the Administration section's sub-sections",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Navigation Component Structure",
            "description": "Set up the basic structure of the Navigation component in /components/layout with dark theme and glassmorphic effects.",
            "dependencies": [],
            "details": "Create a Navigation.tsx component in /components/layout. Use Tailwind CSS for styling. Set background color to #2D1B69 with opacity. Apply backdrop-filter: blur(10px) for glassmorphic effect. Use rounded-lg for corners. Include a container div with flex flex-col for vertical layout. Add subtle border using border border-purple-300 border-opacity-20.",
            "status": "pending",
            "testStrategy": "Verify component renders without errors and matches the dark theme aesthetic from the provided design."
          },
          {
            "id": 2,
            "title": "Implement Main Menu Items",
            "description": "Add all 9 main menu items from menu.md to the Navigation component with appropriate icons and styling.",
            "dependencies": [
              1
            ],
            "details": "Map through the 9 main menu items from menu.md. For each item, create a button with flex items-center p-3 hover:bg-purple-700 hover:bg-opacity-30 transition-all duration-300. Use lucide-react for icons, setting size={20} and className='text-cyan-400 mr-3'. Set text color to text-gray-200. Implement active state with bg-purple-600 bg-opacity-50 and add a glowing effect using box-shadow: 0 0 15px rgba(129, 140, 248, 0.5). Ensure the sidebar has a curved edge design as referenced in the PRD.",
            "status": "pending",
            "testStrategy": "Test each of the 9 main menu items' render, hover state, and active state. Ensure icons are correctly displayed and aligned. Verify the curved edge design of the sidebar."
          },
          {
            "id": 3,
            "title": "Add Static Sub-Menu Items",
            "description": "Implement static sub-menu items for all 9 main sections as specified in menu.md with appropriate indentation and styling.",
            "dependencies": [
              2
            ],
            "details": "For sub-menu items, use smaller text (text-sm) and add left padding (pl-8) for indentation. Style with text-gray-400 and hover:text-cyan-300. Add a subtle left border to indicate nesting: border-l-2 border-purple-500 border-opacity-30. Implement a softer glow effect on hover using box-shadow: 0 0 10px rgba(129, 140, 248, 0.3). Ensure proper nesting for the Administration section's sub-sections.",
            "status": "pending",
            "testStrategy": "Verify sub-menu items are correctly nested under their parent items for all 9 main sections. Test hover and active states for sub-menu items. Ensure proper structure for the Administration section's nested sub-items."
          },
          {
            "id": 4,
            "title": "Implement Next.js App Router Integration",
            "description": "Set up routing for all navigation items using Next.js App Router and create placeholder pages for each main item and sub-item.",
            "dependencies": [
              2,
              3
            ],
            "details": "Use Next.js Link component for navigation items. Create placeholder pages in app/ directory for each main navigation item and sub-item. Implement dynamic routing for sub-items if necessary. In placeholder pages, add a gradient background using bg-gradient-to-br from-purple-900 to-indigo-900. Include a page title with text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400 for the glowing text effect.",
            "status": "pending",
            "testStrategy": "Test navigation between all pages, including sub-item pages. Ensure correct routes are set up and all placeholder pages are accessible."
          },
          {
            "id": 5,
            "title": "Finalize Styling and Responsiveness",
            "description": "Apply final styling touches according to design-theme.md and ensure responsive behavior across devices.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implement a media query for mobile devices to collapse the sidebar into a hamburger menu. Use @media (max-width: 768px) in a style tag or in a separate CSS module. For the collapsed state, position the navigation absolutely and add a slide-in animation. Add a semi-transparent overlay (bg-black bg-opacity-50) behind the open mobile menu. Implement smooth transitions for opening/closing using transition-all duration-300. Ensure all interactive elements have distinct hover and focus states with increased glow effect.",
            "status": "pending",
            "testStrategy": "Test responsiveness across various screen sizes. Verify mobile menu functionality and ensure all styles are applied correctly in both desktop and mobile views."
          },
          {
            "id": 6,
            "title": "Implement Dynamic Recently Viewed Items",
            "description": "Add functionality for dynamic recently viewed items in the Suppliers and Individuals sections.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create a mechanism to track and display recently viewed suppliers and individuals. Implement a state management solution (e.g., React Context or Redux) to store and update recently viewed items. Display these items dynamically under the respective sections in the navigation menu. Limit the number of recently viewed items to 5 for each section.",
            "status": "pending",
            "testStrategy": "Test the addition and removal of recently viewed items. Verify that the list updates correctly when viewing new suppliers or individuals. Ensure the limit of 5 items is maintained."
          },
          {
            "id": 7,
            "title": "Refine Administration Section Structure",
            "description": "Implement the nested structure for the Administration section with its main sub-sections and respective sub-items.",
            "dependencies": [
              3,
              4
            ],
            "details": "Create a nested structure for the Administration section, including the three main sub-sections: User & Access Management, Vetting Configuration, and System & Company Configuration. Implement sub-items for each of these sections. Use appropriate indentation and styling to clearly show the hierarchy. Ensure that the Billing & Subscription item is at the same level as the main sub-sections.",
            "status": "pending",
            "testStrategy": "Verify the correct nesting and display of all Administration sub-sections and their respective sub-items. Test navigation and routing for all nested items. Ensure the structure is clear and intuitive for users."
          }
        ]
      },
      {
        "id": 5,
        "title": "Set up global typography and Tailwind CSS configuration",
        "description": "Configure global typography settings and set up Tailwind CSS with the core color palette specified in design-theme.md.",
        "details": "1. Choose and import the font (Inter, Manrope, or Poppins) in globals.css\n2. Set up font sizes and weights in tailwind.config.js\n3. Configure the core color palette in tailwind.config.js using hex codes from design-theme.md\n4. Create utility classes for typography hierarchy\n5. Apply typography settings globally\n6. Ensure color palette is accessible in both dark and light themes",
        "testStrategy": "1. Verify chosen font is applied globally\n2. Check that color palette is correctly configured and accessible\n3. Test typography hierarchy on placeholder pages\n4. Ensure colors are applied correctly in both themes",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Import and configure Inter font",
            "description": "Import the Inter font and set up basic typography settings in globals.css and tailwind.config.js",
            "dependencies": [],
            "details": "1. Add Inter font import to globals.css: @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'); 2. In tailwind.config.js, extend the fontFamily: { 'sans': ['Inter', 'sans-serif'] } 3. Set up font sizes: text-xs: 0.75rem, text-sm: 0.875rem, text-base: 1rem, text-lg: 1.125rem, text-xl: 1.25rem, text-2xl: 1.5rem, text-3xl: 1.875rem, text-4xl: 2.25rem 4. Configure font weights: font-light: 300, font-normal: 400, font-medium: 500, font-semibold: 600, font-bold: 700",
            "status": "pending",
            "testStrategy": "Verify font loading and application in browser dev tools. Check if font sizes and weights are applied correctly to various text elements."
          },
          {
            "id": 2,
            "title": "Set up core color palette",
            "description": "Configure the core color palette in tailwind.config.js using hex codes from design-theme.md, ensuring accessibility in both dark and light themes",
            "dependencies": [],
            "details": "In tailwind.config.js, extend the colors object: colors: { primary: { DEFAULT: '#2D1B69', light: '#3D2B79', dark: '#1D0B59' }, secondary: { DEFAULT: '#FF4ECD', light: '#FF6EDD', dark: '#FF2EBD' }, accent: { cyan: '#00E5FF', orange: '#FF6B00', magenta: '#FF00FF' }, background: { dark: '#1A0B3B', light: '#F0F0F0' }, text: { dark: '#FFFFFF', light: '#1A0B3B' }, glass: { light: 'rgba(255, 255, 255, 0.1)', dark: 'rgba(0, 0, 0, 0.1)' } }. Ensure contrast ratios meet WCAG AA standards for text readability.",
            "status": "pending",
            "testStrategy": "Use a color contrast checker to verify accessibility. Test color application in both light and dark mode contexts."
          },
          {
            "id": 3,
            "title": "Create typography utility classes",
            "description": "Develop utility classes for typography hierarchy, including headings, body text, and special text styles",
            "dependencies": [
              1
            ],
            "details": "In tailwind.config.js, add custom classes: 1. .h1: text-4xl font-bold text-text-dark dark:text-text-light 2. .h2: text-3xl font-semibold text-text-dark dark:text-text-light 3. .h3: text-2xl font-medium text-text-dark dark:text-text-light 4. .body-large: text-lg font-normal text-text-dark dark:text-text-light 5. .body: text-base font-normal text-text-dark dark:text-text-light 6. .caption: text-sm font-light text-text-dark dark:text-text-light 7. .glow-text: text-accent-cyan drop-shadow-[0_0_5px_rgba(0,229,255,0.7)] 8. .gradient-text: bg-clip-text text-transparent bg-gradient-to-r from-accent-magenta to-accent-cyan",
            "status": "pending",
            "testStrategy": "Apply classes to various text elements and verify styling in both light and dark modes. Check for proper scaling and readability across device sizes."
          },
          {
            "id": 4,
            "title": "Implement glassmorphic and glow effects",
            "description": "Create utility classes for glassmorphic elements and glowing effects as seen in the dashboard design",
            "dependencies": [
              2
            ],
            "details": "In tailwind.config.js, add: 1. .glassmorphic: bg-glass-light dark:bg-glass-dark backdrop-blur-md border border-white/10 dark:border-black/10 rounded-xl 2. .glow-card: bg-gradient-to-br from-primary to-primary-dark shadow-[0_0_15px_rgba(255,78,205,0.3)] 3. .glow-chart: filter drop-shadow-[0_0_5px_rgba(255,78,205,0.7)] 4. .hover-glow: transition-all hover:shadow-[0_0_10px_rgba(0,229,255,0.5)] 5. Add plugin for advanced effects: require('@tailwindcss/aspect-ratio'), require('tailwindcss-glassmorphism') Configure glassmorphism plugin with appropriate values for blur and saturation.",
            "status": "pending",
            "testStrategy": "Apply classes to elements and verify the glassmorphic and glow effects. Test interactivity and ensure effects are consistent across browsers."
          },
          {
            "id": 5,
            "title": "Set up global styles and theme switching",
            "description": "Apply typography settings globally and implement a theme switching mechanism for dark/light modes",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1. In globals.css, apply base styles: body { @apply bg-background-light dark:bg-background-dark text-text-dark dark:text-text-light font-sans } 2. Implement theme switching: - Add 'dark' class toggle to <html> element - Use CSS variables for theme-specific values: :root { --background: theme('colors.background.light'); --text: theme('colors.text.dark'); } :root.dark { --background: theme('colors.background.dark'); --text: theme('colors.text.light'); } 3. Create a ThemeProvider component with useContext for global theme state 4. Add a theme toggle button in the layout that updates the theme context and toggles the 'dark' class",
            "status": "pending",
            "testStrategy": "Test theme switching functionality. Verify that all components and utility classes respond correctly to theme changes. Ensure smooth transitions between themes."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement glassmorphism effect on static UI elements",
        "description": "Apply glassmorphism effect to at least one static UI element as described in design-theme.md and seen in 'Recehtok-style_dashboard.png'.",
        "details": "1. Create a GlassmorphicCard component in /components/ui\n2. Implement glassmorphism using Tailwind CSS classes (bg-opacity-*, backdrop-blur-*, etc.)\n3. Add subtle borders to enhance the glass effect\n4. Place the glassmorphic element on a placeholder page or sidebar\n5. Ensure the effect is visible and appealing in both dark and light themes",
        "testStrategy": "1. Visually inspect the glassmorphism effect in both themes\n2. Verify the effect matches the description in design-theme.md\n3. Check that the effect doesn't interfere with readability or usability",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create GlassmorphicCard component",
            "description": "Implement a reusable GlassmorphicCard component in /components/ui with Tailwind CSS classes for glassmorphism effect",
            "dependencies": [],
            "details": "Create a new file GlassmorphicCard.tsx in /components/ui. Use Tailwind classes: bg-opacity-10 bg-white dark:bg-opacity-20 dark:bg-gray-800 backdrop-blur-lg rounded-xl border border-opacity-20 border-white dark:border-gray-700. Apply box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37). Use React.FC for TypeScript support. Include props for customization (e.g., padding, width).",
            "status": "pending",
            "testStrategy": "Create unit tests using React Testing Library to ensure proper rendering and prop handling."
          },
          {
            "id": 2,
            "title": "Implement glowing effect for charts",
            "description": "Add a glowing effect to chart elements to match the vibrant aesthetic in the Recehtok-style dashboard",
            "dependencies": [],
            "details": "Use CSS filters and box-shadow for the glow effect. Apply classes: filter drop-shadow(0 0 10px rgba(255, 0, 255, 0.7)) for magenta, rgba(0, 255, 255, 0.7) for cyan, and rgba(255, 165, 0, 0.7) for orange. Use z-index and pointer-events: none to ensure the glow doesn't interfere with interactions. Implement this in the chart component or as a wrapper.",
            "status": "pending",
            "testStrategy": "Visually inspect the chart components in Storybook or a test page to ensure the glow effect is applied correctly."
          },
          {
            "id": 3,
            "title": "Create gradient backgrounds for wallet cards",
            "description": "Implement gradient backgrounds with subtle glow effects for wallet card components",
            "dependencies": [],
            "details": "Use Tailwind's gradient utilities: bg-gradient-to-br from-purple-600 to-blue-500. Add a subtle glow with box-shadow: 0 0 15px rgba(123, 97, 255, 0.3). Apply rounded-2xl for corners. Use text-white font-semibold for content. Implement hover effect: hover:shadow-lg hover:scale-105 transition-all duration-300.",
            "status": "pending",
            "testStrategy": "Create snapshot tests for the wallet card component to ensure consistent styling across renders."
          },
          {
            "id": 4,
            "title": "Implement dark theme with rich, luminous overlays",
            "description": "Create a dark theme color scheme with rich purple backgrounds and luminous overlay effects",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "In tailwind.config.js, extend the theme with custom colors: 'deep-purple': '#2D1B69', 'accent-cyan': '#00FFFF', 'accent-magenta': '#FF00FF', 'accent-orange': '#FFA500'. Use bg-deep-purple for main background. Apply overlay effects with bg-opacity-30 bg-accent-cyan (or magenta/orange) mix-blend-overlay. Ensure text contrast with text-white or text-gray-200.",
            "status": "pending",
            "testStrategy": "Implement theme toggle functionality and test all components in both light and dark modes for proper color application."
          },
          {
            "id": 5,
            "title": "Refine typography and interactive elements",
            "description": "Implement clean, modern typography and add glowing active states to interactive elements",
            "dependencies": [
              4
            ],
            "details": "Use Tailwind's font utilities: font-sans text-sm md:text-base for body text, text-lg md:text-xl font-semibold for headings. For interactive elements, add hover:bg-opacity-80 active:shadow-glow-cyan (custom class). Define @layer utilities { .shadow-glow-cyan { box-shadow: 0 0 15px rgba(0, 255, 255, 0.7); } } in your CSS. Apply transition-all duration-300 to smooth state changes.",
            "status": "pending",
            "testStrategy": "Create interaction tests using Cypress or Playwright to ensure hover and active states are applied correctly across different screen sizes."
          }
        ]
      },
      {
        "id": 7,
        "title": "Add subtle glow effect to UI elements",
        "description": "Implement a subtle glow effect on at least one static UI element as per design-theme.md and 'Recehtok-style_dashboard.png'.",
        "details": "1. Create a GlowEffect component or utility class in /components/ui\n2. Implement the glow effect using CSS box-shadow or filter properties\n3. Apply the glow effect to a static UI element (e.g., active button state, decorative element)\n4. Ensure the glow effect is subtle and enhances the 'Luminous & Dynamic' feel\n5. Make the glow effect customizable for different use cases",
        "testStrategy": "1. Visually inspect the glow effect in both themes\n2. Verify the effect matches the description in design-theme.md\n3. Ensure the glow effect doesn't negatively impact performance",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create GlowEffect utility class",
            "description": "Implement a GlowEffect utility class in /components/ui to generate customizable glow effects",
            "dependencies": [],
            "details": "Create a GlowEffect.js file in /components/ui. Implement a class with methods to generate CSS for glow effects. Use box-shadow with rgba colors for the glow. Include parameters for color (default: rgba(123, 97, 255, 0.5)), intensity (default: 20px), and spread (default: 5px). Example usage: const glowStyle = GlowEffect.generate('#7B61FF', 20, 5);",
            "status": "pending",
            "testStrategy": "Unit test the GlowEffect class methods with various input parameters to ensure correct CSS output"
          },
          {
            "id": 2,
            "title": "Apply glow to wallet cards",
            "description": "Implement subtle glow effects on wallet cards to match the Recehtok-style dashboard",
            "dependencies": [
              1
            ],
            "details": "In the WalletCard component, apply the GlowEffect to the card container. Use tailwind classes for rounded corners (rounded-xl) and gradients (bg-gradient-to-br). For each card type, use specific colors: Bitcoin (from-orange-400 to-orange-600), Ethereum (from-blue-400 to-blue-600), Litecoin (from-gray-400 to-gray-600). Apply glow effect: style={{...GlowEffect.generate(matchingColor, 15, 3)}}. Ensure the glow color matches the card's primary color.",
            "status": "pending",
            "testStrategy": "Visual regression testing to compare rendered wallet cards with the provided design screenshot"
          },
          {
            "id": 3,
            "title": "Enhance chart glow effects",
            "description": "Implement vibrant glowing effects on multi-colored line charts",
            "dependencies": [
              1
            ],
            "details": "In the ChartComponent, apply glow effects to each line series. Use svg filters for the glow: <filter id=\"glow\"><feGaussianBlur stdDeviation=\"3.5\" result=\"coloredBlur\"/><feMerge><feMergeNode in=\"coloredBlur\"/><feMergeNode in=\"SourceGraphic\"/></feMerge></filter>. Apply filter to path elements: style={{filter: 'url(#glow)'}}. Use vibrant colors for lines: #FF61D8 (pink), #61FFDD (cyan), #FFB561 (orange). Adjust line thickness (stroke-width) to 2px for better glow visibility.",
            "status": "pending",
            "testStrategy": "Create snapshot tests for the ChartComponent with glow effects and compare with expected output"
          },
          {
            "id": 4,
            "title": "Implement glassmorphic notification panel",
            "description": "Create a translucent notification panel with backdrop blur and subtle glow border",
            "dependencies": [
              1
            ],
            "details": "In the NotificationPanel component, use tailwind classes for glassmorphic effect: bg-opacity-20 bg-purple-900 backdrop-filter backdrop-blur-lg. Add a subtle border: border border-purple-500 border-opacity-30. Apply glow to the border using the GlowEffect utility: style={{...GlowEffect.generate('rgba(123, 97, 255, 0.3)', 10, 2)}}. Use rounded-lg for corners. Ensure text has good contrast: text-purple-50. For the panel's background, use rgba(45, 27, 105, 0.8) to match the dark theme.",
            "status": "pending",
            "testStrategy": "Implement visual tests to ensure the notification panel renders correctly with glassmorphic effects and glow"
          },
          {
            "id": 5,
            "title": "Add glow effect to interactive elements",
            "description": "Implement glowing active states for buttons and navigation items",
            "dependencies": [
              1
            ],
            "details": "Create a higher-order component GlowWrapper that applies glow effects on hover and active states. Use it to wrap Button and NavItem components. In GlowWrapper, apply glow on :hover and .active classes using the GlowEffect utility. For buttons: use bg-gradient-to-r from-purple-500 to-indigo-600 for background, and text-white for text. On hover: scale-105 transition-transform duration-200. Active glow: GlowEffect.generate('#7B61FF', 25, 8). For nav items: use text-purple-200 normally, text-white and GlowEffect.generate('#7B61FF', 15, 5) when active.",
            "status": "pending",
            "testStrategy": "Implement integration tests to verify glow effects appear on hover and for active states of buttons and navigation items"
          }
        ]
      },
      {
        "id": 8,
        "title": "Style and customize shadcn/ui components",
        "description": "Style and customize common shadcn/ui components to reflect the overall theme and design guidelines.",
        "details": "1. Customize Button component to match the theme (colors, rounded corners)\n2. Style Input component according to design guidelines\n3. Customize Card component to reflect the overall theme\n4. Ensure all customized components work well in both dark and light themes\n5. Create a theme-aware Switch component for the theme switcher\n6. Document any modifications made to shadcn/ui components",
        "testStrategy": "1. Verify styled components match the design guidelines\n2. Test components in both dark and light themes\n3. Ensure customizations don't break component functionality\n4. Check accessibility of customized components",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Customize Button component",
            "description": "Style the Button component to match the dark theme aesthetic with glowing effects",
            "dependencies": [],
            "details": "Modify the Button component using Tailwind classes: bg-gradient-to-r from-[#3A1C71] to-[#D76D77] hover:from-[#D76D77] hover:to-[#3A1C71] text-white font-semibold py-2 px-4 rounded-lg shadow-lg hover:shadow-xl transition duration-300 ease-in-out. Add a custom CSS class for the glow effect: .glow-effect { box-shadow: 0 0 15px rgba(215, 109, 119, 0.5); }. Ensure the button adapts to both dark and light themes by using CSS variables for colors.",
            "status": "pending",
            "testStrategy": "Create a storybook story showcasing the button in various states (default, hover, active) in both dark and light themes. Test for accessibility and color contrast."
          },
          {
            "id": 2,
            "title": "Style Input component",
            "description": "Customize the Input component to reflect the glassmorphic design with subtle glow",
            "dependencies": [],
            "details": "Apply Tailwind classes to the Input: bg-opacity-20 bg-white dark:bg-opacity-10 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg py-2 px-4 focus:ring-2 focus:ring-cyan-400 focus:border-transparent. Add a custom CSS class for the glassmorphic effect: .glassmorphic { backdrop-filter: blur(10px); }. Implement a subtle glow on focus using box-shadow: 0 0 10px rgba(6, 182, 212, 0.3);.",
            "status": "pending",
            "testStrategy": "Create unit tests to ensure the input behaves correctly in different states (default, focus, disabled) and themes. Test for proper text contrast and placeholder visibility."
          },
          {
            "id": 3,
            "title": "Enhance Card component",
            "description": "Redesign the Card component to incorporate gradient backgrounds and glow effects",
            "dependencies": [],
            "details": "Style the Card using Tailwind: bg-gradient-to-br from-[#2D1B69] to-[#1A0B2E] rounded-xl p-6 shadow-lg. Add a custom CSS class for the glow: .card-glow { box-shadow: 0 0 20px rgba(45, 27, 105, 0.4); }. Implement hover animations: hover:scale-105 transition-transform duration-300 ease-in-out. For content within the card, use text-white or text-gray-200 for good contrast.",
            "status": "pending",
            "testStrategy": "Develop snapshot tests for the Card component in various configurations. Ensure the component renders correctly with different content types and maintains its aesthetic in both themes."
          },
          {
            "id": 4,
            "title": "Create theme-aware Switch component",
            "description": "Develop a custom Switch component for theme switching with glowing effects",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Build the Switch using a combination of div and input elements. Style with Tailwind: w-14 h-7 bg-gray-300 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all dark:border-gray-600 peer-checked:bg-cyan-600. Add a glow effect on the active state: peer-checked:shadow-[0_0_15px_rgba(6,182,212,0.5)].",
            "status": "pending",
            "testStrategy": "Implement integration tests to verify the Switch toggles themes correctly. Test for proper ARIA attributes and keyboard accessibility."
          },
          {
            "id": 5,
            "title": "Document component modifications",
            "description": "Create comprehensive documentation for all customized shadcn/ui components",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Generate a Markdown file for each modified component (Button, Input, Card, Switch) detailing: 1) Custom Tailwind classes used, 2) Any additional CSS classes for special effects, 3) Props and their impact on styling, 4) Theme-specific behaviors, 5) Accessibility considerations. Include code snippets and usage examples. Create a main documentation page linking to individual component docs and explaining the overall theming approach.",
            "status": "pending",
            "testStrategy": "Review documentation for completeness and accuracy. Implement a documentation testing framework like Docusaurus to ensure all code examples are valid and up-to-date."
          }
        ]
      },
      {
        "id": 9,
        "title": "Create placeholder pages for main navigation items",
        "description": "Develop placeholder pages for each main navigation link and sub-page specified in menu.md using Next.js App Router structure and Recehtok-style dark theme.",
        "status": "pending",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "1. Create a basic page template with a title and content area using the Recehtok-style dark theme\n2. Implement placeholder pages for all main navigation items and their sub-pages as specified in menu.md\n3. Add page titles that correspond to the navigation items\n4. Include a few representative shadcn/ui components on each page (e.g., Card, Button)\n5. Ensure proper routing to each placeholder page using Next.js App Router\n6. Apply consistent styling and layout across all placeholder pages\n7. Organize pages according to the Next.js App Router structure",
        "testStrategy": "1. Verify all main navigation items and sub-pages have corresponding placeholder pages\n2. Check that routing works correctly for all pages, including nested routes\n3. Ensure placeholder content is visible and styled appropriately with the Recehtok-style dark theme\n4. Test placeholder pages in both dark and light themes\n5. Verify that the Next.js App Router structure is correctly implemented",
        "subtasks": [
          {
            "id": 1,
            "title": "Create dark-themed base template",
            "description": "Develop a reusable base template with dark theme aesthetics for all placeholder pages",
            "dependencies": [],
            "details": "Create a base.html template with a dark purple background (#2D1B69). Use Tailwind classes for consistent styling: bg-[#2D1B69] text-white. Add a sidebar component with clean icons and typography (text-sm font-medium). Implement a main content area and a notifications panel with glassmorphic effect (backdrop-filter backdrop-blur-lg bg-opacity-30 bg-white/10 rounded-2xl). Use modern sans-serif typography (font-sans) with good contrast. Apply rounded corners (rounded-lg) and subtle shadows (shadow-md) throughout.",
            "status": "pending",
            "testStrategy": "Verify the base template renders correctly with dark theme and proper layout structure"
          },
          {
            "id": 2,
            "title": "Implement glowing chart components",
            "description": "Create reusable chart components with vibrant glowing effects",
            "dependencies": [
              1
            ],
            "details": "Use a charting library like Chart.js or D3.js to create line charts. Apply custom CSS for glowing effects: .chart-line { filter: drop-shadow(0 0 10px rgba(255, 105, 180, 0.7)); }. Use vibrant colors for chart lines: pink (#FF69B4), cyan (#00FFFF), and orange (#FFA500). Implement smooth animations for chart updates using CSS transitions.",
            "status": "pending",
            "testStrategy": "Test chart rendering, glowing effects, and responsiveness across different screen sizes"
          },
          {
            "id": 3,
            "title": "Design glassmorphic notification panel",
            "description": "Create a translucent notification panel with backdrop blur and subtle borders",
            "dependencies": [
              1
            ],
            "details": "Implement a fixed position panel on the right side of the screen. Use Tailwind classes for glassmorphic effect: bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg border border-white border-opacity-20 rounded-2xl. Add subtle box-shadow for depth. Include a scrollable list of notifications with hover effects (hover:bg-white hover:bg-opacity-20 transition-all duration-300).",
            "status": "pending",
            "testStrategy": "Verify blur effect, scrolling behavior, and hover states of notification items"
          },
          {
            "id": 4,
            "title": "Develop gradient wallet cards",
            "description": "Create wallet card components with gradient backgrounds and subtle glow effects",
            "dependencies": [
              1
            ],
            "details": "Design wallet cards using Tailwind classes: rounded-xl p-4 bg-gradient-to-br. Use vibrant gradient colors: from-pink-500 to-purple-600. Add glow effect with box-shadow: 0 0 20px rgba(255, 105, 180, 0.3). Include card content with clean typography and icons. Implement hover state with increased glow: hover:shadow-lg hover:shadow-pink-500/50 transition-all duration-300.",
            "status": "pending",
            "testStrategy": "Test gradient rendering, glow effects, and hover state transitions"
          },
          {
            "id": 5,
            "title": "Implement interactive elements and routing",
            "description": "Add interactive UI elements with glowing active states and set up routing for placeholder pages",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Create interactive buttons and menu items using Tailwind: rounded-lg bg-white/10 hover:bg-white/20 active:bg-white/30 transition-all duration-200. Add glowing active state: .active { box-shadow: 0 0 15px rgba(0, 255, 255, 0.5); }. Implement routing using Next.js App Router. Create placeholder pages for all main navigation items and sub-pages as specified in menu.md. Ensure each page uses the base template and includes relevant components (charts, wallet cards, notifications).",
            "status": "pending",
            "testStrategy": "Verify routing functionality, interactive element behaviors, and consistent styling across all placeholder pages"
          },
          {
            "id": 6,
            "title": "Create main navigation placeholder pages",
            "description": "Develop placeholder pages for main navigation items using Next.js App Router",
            "dependencies": [
              1,
              5
            ],
            "details": "Create placeholder pages for Dashboard, Vetting Center, Suppliers, Individuals, Reporting & Insights, Field Operations, Administration, My Account, and Help Center. Use the Next.js App Router structure to organize these pages. Implement basic layout and content structure for each page.",
            "status": "pending",
            "testStrategy": "Verify that all main navigation pages are created and accessible through the Next.js App Router"
          },
          {
            "id": 7,
            "title": "Implement sub-page placeholders",
            "description": "Create placeholder pages for all sub-pages of main navigation items",
            "dependencies": [
              6
            ],
            "details": "Develop placeholder pages for sub-pages of Vetting Center, Suppliers, Individuals, Reporting & Insights, Field Operations, Administration, My Account, and Help Center. Use Next.js App Router nested routing to organize these sub-pages. Ensure consistent styling and layout across all sub-pages.",
            "status": "pending",
            "testStrategy": "Test navigation to all sub-pages and verify proper nesting within the Next.js App Router structure"
          },
          {
            "id": 8,
            "title": "Apply Recehtok-style dark theme to all pages",
            "description": "Ensure all placeholder pages adhere to the Recehtok-style dark theme",
            "dependencies": [
              6,
              7
            ],
            "details": "Apply the Recehtok-style dark theme consistently across all main and sub-pages. Use the dark purple background (#2D1B69) and ensure proper contrast for text and UI elements. Implement glassmorphic effects and subtle animations where appropriate.",
            "status": "pending",
            "testStrategy": "Verify visual consistency of the Recehtok-style dark theme across all placeholder pages"
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement responsive behavior for sidebar",
        "description": "Ensure the sidebar is responsive, with a fixed position on desktop and a hamburger menu on mobile.",
        "details": "1. Use Tailwind CSS breakpoints to define desktop and mobile views\n2. Implement fixed sidebar for desktop views (>1024px)\n3. Create a hamburger menu icon for mobile views (<768px)\n4. Develop slide-in functionality for the sidebar on mobile\n5. Ensure smooth transitions between desktop and mobile views\n6. Handle sidebar open/close state management\n7. Implement click-outside behavior to close sidebar on mobile",
        "testStrategy": "1. Test responsiveness across various screen sizes\n2. Verify sidebar behavior on desktop and mobile devices\n3. Check smooth transitions between views\n4. Ensure hamburger menu and slide-in functionality work correctly",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement fixed sidebar for desktop",
            "description": "Create a fixed position sidebar for desktop views (>1024px) with dark theme and glowing effects",
            "dependencies": [],
            "details": "Use Tailwind CSS to create a fixed sidebar with a width of 250px and height of 100vh. Apply bg-[#2D1B69] for the background color. Add subtle glow effect using box-shadow: 0 0 15px rgba(138, 43, 226, 0.3). Use text-gray-200 for menu items and hover:text-cyan-400 for hover states. Implement clean icons from a library like Heroicons. Use font-sans and text-sm for typography. Add transition-all duration-300 for smooth state changes.",
            "status": "pending",
            "testStrategy": "Verify sidebar remains fixed when scrolling on screens wider than 1024px. Check for correct styling and hover effects."
          },
          {
            "id": 2,
            "title": "Develop hamburger menu for mobile",
            "description": "Create a hamburger menu icon and slide-in functionality for the sidebar on mobile views (<768px)",
            "dependencies": [
              1
            ],
            "details": "Use Tailwind's md:hidden to show hamburger only on mobile. Create hamburger icon with three stacked div elements, each with h-0.5 w-6 bg-gray-200 my-1. Position absolutely top-4 left-4. For slide-in, use transform translate-x-[-100%] for hidden state and translate-x-0 for visible. Apply transition-transform duration-300 for smooth animation. Use a semi-transparent backdrop (bg-black bg-opacity-50) that appears when sidebar is open.",
            "status": "pending",
            "testStrategy": "Test hamburger visibility and click behavior on mobile. Ensure smooth slide-in animation and backdrop appearance."
          },
          {
            "id": 3,
            "title": "Implement glassmorphic effect for sidebar",
            "description": "Apply a glassmorphic effect to the sidebar for both desktop and mobile views",
            "dependencies": [
              1,
              2
            ],
            "details": "Use backdrop-filter backdrop-blur-lg to create glassmorphic effect. Apply bg-opacity-80 to the sidebar background. Add a subtle border with border-r border-purple-300 border-opacity-20. For the glow effect, use box-shadow: 0 0 20px rgba(139, 92, 246, 0.3). Ensure contrast with text-gray-100 for menu items. Use rounded-r-2xl for subtle rounded corners on the right side of the sidebar.",
            "status": "pending",
            "testStrategy": "Verify glassmorphic effect is visible and consistent across different devices and browsers. Check for appropriate text contrast and glow effect."
          },
          {
            "id": 4,
            "title": "Handle sidebar state management",
            "description": "Implement open/close state management for the sidebar, including click-outside behavior on mobile",
            "dependencies": [
              2
            ],
            "details": "Use React useState hook to manage sidebar open/close state. Create a toggleSidebar function to switch state. For click-outside, add an event listener to document that checks if click target is outside sidebar and closes it if so. Use useEffect to add/remove this listener. Apply appropriate Tailwind classes (hidden md:block) to control visibility based on state and screen size.",
            "status": "pending",
            "testStrategy": "Test sidebar opens and closes correctly on mobile. Verify click-outside behavior closes sidebar. Ensure sidebar state persists correctly when resizing browser."
          },
          {
            "id": 5,
            "title": "Ensure smooth responsive transitions",
            "description": "Implement smooth transitions between desktop and mobile views, maintaining visual consistency",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Use Tailwind's transition-all duration-300 for all transitioning elements. Implement media queries with @media (min-width: 768px) for desktop styles. Ensure consistent color scheme (#2D1B69 background, text-gray-200, cyan-400 for accents) across breakpoints. Adjust font sizes with text-sm md:text-base. Use Tailwind's responsive prefixes (sm:, md:, lg:) to adjust layout and spacing. Maintain glassmorphic effect and glow across breakpoints by using consistent backdrop-filter and box-shadow values.",
            "status": "pending",
            "testStrategy": "Test responsiveness by resizing browser window, ensuring smooth transitions without jumps or flashes. Verify consistency of colors, effects, and layout across all screen sizes."
          }
        ]
      },
      {
        "id": 11,
        "title": "Set up initial Recharts configuration",
        "description": "Install Recharts library and set up a basic chart container for future use.",
        "details": "1. Confirm Recharts is installed correctly\n2. Create a ChartContainer component in /components/ui\n3. Set up a simple placeholder chart (e.g., LineChart) with mock data\n4. Style the chart container to match the overall theme\n5. Ensure the chart respects dark and light themes\n6. Add the chart container to the Dashboard placeholder page",
        "testStrategy": "1. Verify Recharts is properly integrated\n2. Check that the placeholder chart renders correctly\n3. Test chart appearance in both dark and light themes\n4. Ensure chart container is responsive",
        "priority": "low",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and configure Recharts library",
            "description": "Install Recharts and set up necessary configurations in the project.",
            "dependencies": [],
            "details": "Run 'npm install recharts' or 'yarn add recharts'. Update tsconfig.json to include Recharts types. Create a new file 'recharts.d.ts' in the project root with: declare module 'recharts';. Add Recharts to the tailwind.config.js content array: './node_modules/recharts/**/*.js'.",
            "status": "pending",
            "testStrategy": "Verify Recharts installation by importing a component in a test file and checking for no TypeScript errors."
          },
          {
            "id": 2,
            "title": "Create ChartContainer component with glassmorphic effect",
            "description": "Develop a reusable ChartContainer component with a glassmorphic design.",
            "dependencies": [
              1
            ],
            "details": "Create 'ChartContainer.tsx' in /components/ui. Use Tailwind classes for glassmorphic effect: 'bg-opacity-20 backdrop-filter backdrop-blur-lg bg-purple-900/30 rounded-xl border border-purple-500/20'. Add subtle glow: 'shadow-lg shadow-purple-500/20'. Ensure responsiveness with 'w-full h-64 md:h-80 lg:h-96'. Include props for customization (width, height, children).",
            "status": "pending",
            "testStrategy": "Create unit tests to ensure proper rendering and prop handling."
          },
          {
            "id": 3,
            "title": "Implement glowing LineChart with mock data",
            "description": "Create a LineChart component with glowing lines using Recharts and custom styling.",
            "dependencies": [
              2
            ],
            "details": "In 'LineChart.tsx', use Recharts' LineChart, Line, XAxis, YAxis, Tooltip. Create custom dot component with radial gradient for glow effect. Use vibrant colors: '#FF00FF' (magenta), '#00FFFF' (cyan), '#FFA500' (orange). Apply SVG filters for line glow: <defs><filter id='glow'><feGaussianBlur stdDeviation='3.5' result='coloredBlur'/><feMerge><feMergeNode in='coloredBlur'/><feMergeNode in='SourceGraphic'/></feMerge></filter></defs>. Apply filter to Line components.",
            "status": "pending",
            "testStrategy": "Test rendering with mock data and verify glow effect visually."
          },
          {
            "id": 4,
            "title": "Implement dark and light theme compatibility",
            "description": "Ensure the ChartContainer and LineChart components respect the app's theme settings.",
            "dependencies": [
              2,
              3
            ],
            "details": "Use Tailwind's dark mode classes. For ChartContainer: 'bg-white dark:bg-[#2D1B69] text-gray-800 dark:text-white'. For LineChart, create theme-specific color schemes. Use CSS variables for dynamic color switching: '--chart-bg: theme(colors.white); --chart-text: theme(colors.gray.800);' and in dark mode: '--chart-bg: #2D1B69; --chart-text: theme(colors.white);'. Update Recharts components to use these variables.",
            "status": "pending",
            "testStrategy": "Create tests that toggle between light and dark modes, asserting correct color applications."
          },
          {
            "id": 5,
            "title": "Integrate ChartContainer into Dashboard page",
            "description": "Add the ChartContainer with LineChart to the Dashboard page, ensuring proper layout and responsiveness.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "In 'pages/dashboard.tsx', import ChartContainer and LineChart. Use grid layout: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'. Place ChartContainer within a grid item: 'col-span-1 md:col-span-2 lg:col-span-2'. Ensure responsiveness with Tailwind classes. Add placeholder sections for wallet cards and notification panel using similar glassmorphic styling. Implement sidebar with 'fixed left-0 top-0 h-full w-64 bg-[#1A0B47] text-white'.",
            "status": "pending",
            "testStrategy": "Perform integration tests to ensure proper rendering of all components on the Dashboard page. Test responsiveness across different screen sizes."
          }
        ]
      },
      {
        "id": 12,
        "title": "Perform final testing and documentation",
        "description": "Conduct comprehensive testing of all implemented features and create necessary documentation.",
        "details": "1. Test all features across different browsers (Chrome, Firefox, Safari)\n2. Verify responsiveness on various devices and screen sizes\n3. Conduct accessibility testing using tools like axe-core\n4. Check for any console errors or warnings\n5. Ensure all acceptance criteria are met\n6. Create a README.md with setup instructions and feature overview\n7. Document any known issues or limitations\n8. Prepare a brief demonstration of implemented features",
        "testStrategy": "1. Use browser developer tools to test responsiveness and check for errors\n2. Employ accessibility testing tools and manual keyboard navigation checks\n3. Verify all acceptance criteria are met using a checklist\n4. Conduct a peer review of the codebase and documentation",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement dark theme and color palette",
            "description": "Set up the dark theme aesthetic with the specified color palette and apply it across all components.",
            "dependencies": [],
            "details": "Use CSS variables or Tailwind config to define colors: --bg-primary: #2D1B69; --text-primary: #FFFFFF; --accent-cyan: #00FFFF; --accent-magenta: #FF00FF; --accent-orange: #FFA500. Apply these colors to all components. For gradients, use background: linear-gradient(45deg, var(--accent-cyan), var(--accent-magenta)); For glowing effects, use box-shadow: 0 0 15px var(--accent-color); Implement dark mode toggle using Tailwind's dark: variant.",
            "status": "pending",
            "testStrategy": "Verify color consistency across all components. Test dark mode toggle functionality."
          },
          {
            "id": 2,
            "title": "Create glowing chart components",
            "description": "Develop chart components with vibrant glowing effects for line charts.",
            "dependencies": [
              1
            ],
            "details": "Use a charting library like Chart.js or D3.js. Apply custom styles for glowing effects: .chart-line { stroke-width: 2; filter: drop-shadow(0 0 8px var(--line-color)); } Use vibrant colors for chart lines (pink, cyan, orange). Implement hover effects to enhance glow: .chart-line:hover { filter: drop-shadow(0 0 12px var(--line-color)); }",
            "status": "pending",
            "testStrategy": "Test chart rendering, responsiveness, and glow effects on hover."
          },
          {
            "id": 3,
            "title": "Implement glassmorphic elements",
            "description": "Create glassmorphic effects for the notification panel and other UI elements.",
            "dependencies": [
              1
            ],
            "details": "Use backdrop-filter: blur(10px) for glassmorphic effect. Apply background: rgba(255, 255, 255, 0.1) for translucency. Add subtle border: border: 1px solid rgba(255, 255, 255, 0.2). For Tailwind, use classes like backdrop-blur-md bg-white/10 border border-white/20. Ensure proper z-index layering for overlapping elements.",
            "status": "pending",
            "testStrategy": "Verify glassmorphic effect visibility and consistency across browsers."
          },
          {
            "id": 4,
            "title": "Design and implement wallet cards",
            "description": "Create wallet card components with gradient backgrounds and subtle glow effects.",
            "dependencies": [
              1,
              3
            ],
            "details": "Use rounded corners: border-radius: 16px or Tailwind's rounded-2xl. Apply gradient backgrounds: background: linear-gradient(135deg, #4A0E4E, #81267D). Add glow effect: box-shadow: 0 0 20px rgba(129, 38, 125, 0.5). Implement hover state: transform: translateY(-5px) on hover. Use Flexbox or Grid for card layout.",
            "status": "pending",
            "testStrategy": "Test card layout, hover effects, and responsiveness on different screen sizes."
          },
          {
            "id": 5,
            "title": "Develop sidebar and overall layout",
            "description": "Create the sidebar navigation and implement the overall dashboard layout structure.",
            "dependencies": [
              1,
              3
            ],
            "details": "Use CSS Grid for main layout: grid-template-columns: 250px 1fr 300px. Style sidebar: background: #1A0F40; color: #FFFFFF. Use SVG icons for nav items. Implement hover states: .nav-item:hover { background: rgba(255, 255, 255, 0.1); }. Ensure responsive design using media queries or Tailwind's responsive classes. Implement collapsible sidebar for mobile views.",
            "status": "pending",
            "testStrategy": "Verify layout structure on various screen sizes. Test sidebar navigation and responsive behavior."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-19T10:14:20.408Z",
      "updated": "2025-06-19T11:03:49.616Z",
      "description": "Tasks for master context"
    }
  }
}